# coding: utf-8

"""
    SDS Client Service API

     This API can be used for: - get collectors configuration by query or by ID - get datasets by a search query or by ID - get files by path, search query over datasets, by ID, or by a subset/combination of results from a dataset query - get data as json by path, search query over datasets, by ID, or by a subset/combination of results from a dataset query 

    The version of the OpenAPI document: 0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict
from pydantic import BaseModel, Field, StrictInt, StrictStr

class Dataset(BaseModel):
    """
    Dataset
    """
    collector_id: StrictStr = Field(...)
    sds_event_timestamp: datetime = Field(...)
    sds_cycle_start_timestamp: datetime = Field(...)
    sds_event_cycle_id: StrictInt = Field(...)
    path: StrictStr = Field(...)
    beam_info: Dict[str, Any] = Field(...)
    id: StrictStr = Field(...)
    __properties = ["collector_id", "sds_event_timestamp", "sds_cycle_start_timestamp", "sds_event_cycle_id", "path", "beam_info", "id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Dataset:
        """Create an instance of Dataset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Dataset:
        """Create an instance of Dataset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Dataset.parse_obj(obj)

        _obj = Dataset.parse_obj({
            "collector_id": obj.get("collector_id"),
            "sds_event_timestamp": obj.get("sds_event_timestamp"),
            "sds_cycle_start_timestamp": obj.get("sds_cycle_start_timestamp"),
            "sds_event_cycle_id": obj.get("sds_event_cycle_id"),
            "path": obj.get("path"),
            "beam_info": obj.get("beam_info"),
            "id": obj.get("id")
        })
        return _obj


