# coding: utf-8

"""
    SDS Client Service API

     This API can be used for: - get collectors configuration by query or by ID - get datasets by a search query or by ID - get files by path, search query over datasets, by ID, or by a subset/combination of results from a dataset query - get data as json by path, search query over datasets, by ID, or by a subset/combination of results from a dataset query 

    The version of the OpenAPI document: 0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class BeamInfo(BaseModel):
    """
    BeamInfo
    """
    mode: StrictStr = Field(...)
    state: StrictStr = Field(...)
    present: StrictStr = Field(...)
    len: Union[StrictFloat, StrictInt] = Field(...)
    energy: Union[StrictFloat, StrictInt] = Field(...)
    dest: StrictStr = Field(...)
    curr: Union[StrictFloat, StrictInt] = Field(...)
    __properties = ["mode", "state", "present", "len", "energy", "dest", "curr"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BeamInfo:
        """Create an instance of BeamInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BeamInfo:
        """Create an instance of BeamInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BeamInfo.parse_obj(obj)

        _obj = BeamInfo.parse_obj({
            "mode": obj.get("mode"),
            "state": obj.get("state"),
            "present": obj.get("present"),
            "len": obj.get("len"),
            "energy": obj.get("energy"),
            "dest": obj.get("dest"),
            "curr": obj.get("curr")
        })
        return _obj


